trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  phpVersion: '8.1.0'

stages:
  - stage: Build
    jobs:
      - job: BuildApp
        steps:
          - script: |
              choco install php --version=$(phpVersion) -y
              php -v
            displayName: 'Install PHP'

          - task: Bash@3
            displayName: 'Install Composer Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                if [ -f composer.json ]; then
                  composer install --no-progress --prefer-dist
                fi

          - task: ArchiveFiles@2
            displayName: 'Archive artifact'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/release.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'php-app'

  - stage: Test
    jobs:
      - job: RunTests
        steps:
          - script: |
              choco install php --version=$(phpVersion) -y
              php -v
            displayName: 'Install PHP'

          - script: |
              composer install
              ./vendor/bin/phpunit --configuration phpunit.xml
            displayName: 'Run PHPUnit Tests'

  - stage: CodeAnalysis
    jobs:
      - job: SonarQube
        steps:
          - checkout: self
            fetchDepth: 0

          - task: SonarQubePrepare@5
            inputs:
              SonarQube: 'SonarQube-Dentcare'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'dentcare-php'
              cliProjectName: 'DentCare PHP App'
              cliSources: '.'

          - task: SonarQubeAnalyze@5

          - task: SonarQubePublish@5
            inputs:
              pollingTimeoutSec: '300'

  - stage: DeployDev
    dependsOn: Build
    jobs:
      - deployment: DeployDevEnv
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: 'php-app'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'Dentcare-Azure-Connection'
                    appType: 'webAppLinux'
                    appName: 'dentcare'
                    package: '$(System.ArtifactsDirectory)/php-app/release.zip'

  - stage: DeployQAT
    dependsOn: DeployDev
    jobs:
      - job: DeployQAT
        steps:
          - script: echo "Mock QAT Deployment"
            displayName: 'Deploy to QAT'

  - stage: DeployStaging
    dependsOn: DeployQAT
    jobs:
      - job: DeployStaging
        steps:
          - script: echo "Mock Staging Deployment"
            displayName: 'Deploy to Staging'

  - stage: DeployProd
    dependsOn: DeployStaging
    jobs:
      - job: DeployProd
        steps:
          - script: echo "Mock Production Deployment"
            displayName: 'Deploy to Production'
